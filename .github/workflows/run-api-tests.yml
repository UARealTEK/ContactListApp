name: Run Tests and Deploy Allure Report

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      suite:
        description: 'Test suite to run (api, ui, both)'
        required: true
        default: 'both'

jobs:
  run-api-tests:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.suite == 'api' || github.event.inputs.suite == 'both' }}
    runs-on: ubuntu-latest
    outputs:
      ran: true
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Run API Tests
        run: mvn clean test -Djunit.jupiter.tags=api -Dallure.results.directory=target/allure-results/api

      - name: Upload API results
        uses: actions/upload-artifact@v4
        with:
          name: api-results
          path: target/allure-results/api

  run-ui-tests:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.suite == 'ui' || github.event.inputs.suite == 'both' }}
    runs-on: ubuntu-latest
    outputs:
      ran: true
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Run UI Tests
        run: mvn clean test -Djunit.jupiter.tags=ui -Dallure.results.directory=target/allure-results/ui

      - name: Upload UI results
        uses: actions/upload-artifact@v4
        with:
          name: ui-results
          path: target/allure-results/ui

  generate-report:
    needs: [run-api-tests, run-ui-tests]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (
        (needs.run-api-tests.result == 'success' || needs.run-api-tests.result == 'skipped') &&
        (needs.run-ui-tests.result == 'success' || needs.run-ui-tests.result == 'skipped')
      )
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts (API)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: api-results
          path: target/allure-results/api

      - name: Download artifacts (UI)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ui-results
          path: target/allure-results/ui

      - name: Download previous Allure history
        continue-on-error: true
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git clone --depth=1 --branch=gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages
          mkdir -p target/allure-results/history
          cp -r gh-pages/history/* target/allure-results/history/ || echo "No previous history"

      - name: Install Allure CLI
        run: |
          curl -o allure.tgz -L https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -xzf allure.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Merge results and generate report
        run: |
          mkdir -p target/allure-results

          # Only keep history â€” NOT previous test results
          if [ -d target/allure-results/history ]; then
            echo "Preserving Allure history only"
            mkdir -p tmp-history
            mv target/allure-results/history tmp-history/
            rm -rf target/allure-results/*
            mkdir -p target/allure-results/history
            mv tmp-history/history/* target/allure-results/history/
          fi

          # Merge fresh results
          if [ -d target/allure-results/api ]; then
            echo "Merging API results..."
            cp -r target/allure-results/api/* target/allure-results/
          fi

          if [ -d target/allure-results/ui ]; then
            echo "Merging UI results..."
            cp -r target/allure-results/ui/* target/allure-results/
          fi

          if [ "$(ls -A target/allure-results | grep -v history)" ]; then
            echo "Generating Allure report..."
            allure generate target/allure-results --clean -o target/allure-report
          else
            echo "No test results found. Skipping report generation."
            mkdir -p target/allure-report
            echo "<html><body><h1>No test results found</h1></body></html>" > target/allure-report/index.html
          fi
      
      

      - name: Save updated history to gh-pages
        run: |
          cp -r target/allure-report/history gh-pages/ || echo "No history generated"
          cd gh-pages
          git add history
          git commit -m "Update Allure history [skip ci]" || echo "No changes"
          git push origin gh-pages

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/allure-report
          name: github-pages

  pages:
    needs: generate-report
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy Allure report to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
