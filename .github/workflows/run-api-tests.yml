name: Run Tests and Deploy Allure Report

on:
  workflow_dispatch:
    inputs:
      suite:
        description: 'Test suite to run (api, ui, both)'
        required: true
        default: 'both'

jobs:
  run-api-tests:
    if: ${{ github.event.inputs.suite == 'api' || github.event.inputs.suite == 'both' }}
    runs-on: ubuntu-latest
    outputs:
      ran: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
      - name: Run API Tests
        run: mvn clean test -Djunit.jupiter.tags=api -Dallure.results.directory=target/allure-results/api
      - name: Upload API results
        uses: actions/upload-artifact@v4
        with:
          name: api-results
          path: target/allure-results/api

  run-ui-tests:
    if: ${{ github.event.inputs.suite == 'ui' || github.event.inputs.suite == 'both' }}
    runs-on: ubuntu-latest
    outputs:
      ran: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
      - name: Run UI Tests
        run: mvn clean test -Djunit.jupiter.tags=ui -Dallure.results.directory=target/allure-results/ui
      - name: Upload UI results
        uses: actions/upload-artifact@v4
        with:
          name: ui-results
          path: target/allure-results/ui

  generate-report:
    needs: [run-api-tests, run-ui-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download API results
        if: ${{ needs.run-api-tests.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: api-results
          path: target/allure-results/api

      - name: Download UI results
        if: ${{ needs.run-ui-tests.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: ui-results
          path: target/allure-results/ui

      - name: Restore Allure history per suite
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git clone --depth=1 --branch=gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages
          
          mkdir -p target/allure-results/history

          if [ -d gh-pages/history/api ] && [ "${{ github.event.inputs.suite }}" != "ui" ]; then
            echo "Restoring API history"
            cp -r gh-pages/history/api/* target/allure-results/history/ || true
          fi

          if [ -d gh-pages/history/ui ] && [ "${{ github.event.inputs.suite }}" != "api" ]; then
            echo "Restoring UI history"
            cp -r gh-pages/history/ui/* target/allure-results/history/ || true
          fi

      - name: Install Allure CLI
        run: |
          curl -o allure.tgz -L https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -xzf allure.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Merge results and generate report
        run: |
          mkdir -p target/allure-results/merged

          cp -r target/allure-results/api/* target/allure-results/merged/ 2>/dev/null || echo "No API results"
          cp -r target/allure-results/ui/* target/allure-results/merged/ 2>/dev/null || echo "No UI results"
          cp -r target/allure-results/history target/allure-results/merged/ || echo "No history to preserve"

          echo "Files in merged:"
          ls -la target/allure-results/merged || echo "Merged dir missing"

          if [ "$(ls -A target/allure-results/merged | grep -v history)" ]; then
            echo "Generating Allure report..."
            allure generate target/allure-results/merged --clean -o target/allure-report
          else
            echo "No test results found. Generating fallback HTML"
            mkdir -p target/allure-report
            echo "<html><body><h1>No test results found</h1></body></html>" > target/allure-report/index.html
          fi

      - name: List Allure report contents
        run: ls -R target/allure-report || echo "Report directory missing!"

      - name: Save updated history to gh-pages
        run: |
          mkdir -p gh-pages/history

          if [ "${{ github.event.inputs.suite }}" == "api" ] || [ "${{ github.event.inputs.suite }}" == "both" ]; then
            mkdir -p gh-pages/history/api
            cp -r target/allure-report/history/* gh-pages/history/api/ || echo "No API history to save"
          fi

          if [ "${{ github.event.inputs.suite }}" == "ui" ] || [ "${{ github.event.inputs.suite }}" == "both" ]; then
            mkdir -p gh-pages/history/ui
            cp -r target/allure-report/history/* gh-pages/history/ui/ || echo "No UI history to save"
          fi

          cd gh-pages
          git add history
          git commit -m "Update Allure history [skip ci]" || echo "No changes"
          git push origin gh-pages

      - name: List final report contents
        run: ls -la target/allure-report

      - name: Upload artifact for GitHub Pages
        if: always()
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/allure-report
          name: github-pages

      - name: Set artifact output name
        run: echo "pages_artifact_name=github-pages" >> $GITHUB_OUTPUT

    outputs:
      pages_artifact_name: github-pages


  pages:
    needs: generate-report
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    if: always()
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy Allure report to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifact_name: ${{ needs.generate-report.outputs.pages_artifact_name }}